# Generated by Django 3.2.15 on 2024-03-01 11:27

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('date', models.DateTimeField(verbose_name='Дата и время старта')),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(0, message='Значение не может быть отрицательным')], verbose_name='Стоимость')),
                ('min_count_students', models.PositiveIntegerField(verbose_name='Минимальное количество студентов в группе')),
                ('max_count_students', models.PositiveIntegerField(verbose_name='Максимальное количество студентов в группе')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'продукт',
                'verbose_name_plural': 'Продукты',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('video_url', models.URLField(verbose_name='Ссылка на видео')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='products.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'урок',
                'verbose_name_plural': 'Уроки',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('affiliation', models.BooleanField(verbose_name='Принадлежность группы к продукту')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='products.product', verbose_name='Продукт')),
                ('students', models.ManyToManyField(related_name='groups_students', to=settings.AUTH_USER_MODEL, verbose_name='Студенты')),
            ],
            options={
                'verbose_name': 'группа',
                'verbose_name_plural': 'Группы',
            },
        ),
        migrations.CreateModel(
            name='Access',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access', models.BooleanField(default=False, verbose_name='Доступ студента к продукту')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_product', to='products.product', verbose_name='Продукт')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_students', to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'доступ студента к продукту',
                'verbose_name_plural': 'Доступ студента к продукту',
            },
        ),
        migrations.AddConstraint(
            model_name='group',
            constraint=models.UniqueConstraint(fields=('product', 'name'), name='unique_product_group'),
        ),
        migrations.AddConstraint(
            model_name='access',
            constraint=models.UniqueConstraint(fields=('product', 'student'), name='unique_product_student'),
        ),
    ]
